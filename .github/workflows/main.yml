# This is a basic workflow to help you get started with Actions

name: main

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - '*'
      - 'ga-ignore-*'
  pull_request:
    branches:
      - '*'
      - 'ga-ignore-*'

  # Allows you to run this workflow manually from the Actions tab
env:
  MIRROR_URL: "{ secrets.MIRROR_URL }"
  EXECUTABLES: "test"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # coding style
  check_coding_style:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:

    - uses: actions/checkout@v2
    - name: coding-style checker
      run: check.sh $(pwd) $(pwd)
    
    - name: disp errors
      run: |
        if [ -f coding-style-reports.log ]; then
          while IFS= read -r line; do
            filename=$(echo "$line" | cut -d ':' -f 1)
            line_number=$(echo "$line" | cut -d ':' -f 2)
            type_error=$(echo "$line" | cut -d ':' -f 3)
            error_code=$(echo "$line" | cut -d ':' -f 4)
            echo "::error title=$type_error coding style error: $filename#L$line_number,::$error_code"
          done < coding-style-reports.log
        fi
  # compil
  check_program_compilation:
    runs-on: ubuntu-latest
    needs: [check_coding_style]
    container: 
      image: epitechcontent/epitest-docker:latest
    steps:

    - uses: actions/checkout@v3
    - name: launches make
      run: make
      timeout-minutes: 2

    - name: launches make clean
      run: make clean

    - name: check exec
      run: |
        IFS=',' read -ra EXECS <<< "${EXECUTABLES}"
          for exec in "${EXECS[@]}"; do
            if [ ! -x "${exec}" ]; then
              echo "Executable ${exec} not found or not executable"
              exit 1
            fi
          done

  run_test:
    runs-on: ubuntu-latest
    needs: [check_program_compilation]
    container: 
      image: epitechcontent/epitest-docker:latest
    steps:

    - uses: actions/checkout@v3
    - name: run_test
      run: make tests_run
      timeout-minutes: 2
  
  # This workflow
  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [run_test]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Push to Mirror
      uses: pixta-dev/repository-mirroring-action@v1
      with:
        ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
        target_repo_url: ${{ env.MIRROR_URL }}
